# This is a basic workflow to help you get started with Actions

name: BUILD-TEST

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - "master"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install docker
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install \
            apt-transport-https \
            ca-certificates \
            curl \
            jq \
            gnupg-agent \
            software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository \
             "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
             $(lsb_release -cs) \
             stable"
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io

      - name: Pull Fusionauth
        shell: bash
        run: |
          docker pull fusionauth/fusionauth-app

      - name: Get docker-compose and .env
        shell: bash
        run: |
          curl -o docker-compose.yml https://raw.githubusercontent.com/FusionAuth/fusionauth-containers/master/docker/fusionauth/docker-compose.yml
          curl -o .env https://raw.githubusercontent.com/FusionAuth/fusionauth-containers/master/docker/fusionauth/.env
          
      - name: Add kickstart to .env
        shell: bash
        run: |             
          echo "">>.env
          echo "FUSIONAUTH_APP_KICKSTART_FILE=/usr/local/fusionauth/kickstart/kickstart.json">>.env
          echo "FUSIONAUTH_ADMIN_PASSWORD=supersecret">>.env
      - name: Show contents of .env
        shell: bash
        run: |          
          cat .env

      - name: List directory
        shell: bash
        run: |
          echo $PWD
          ls -latr
                   
      - name: Run docker
        shell: bash
        run: | 
          docker-compose up -d
          sleep 8
      - name: Show docker-compose config
        shell: bash
        run: | 
          docker-compose config
          sleep 3
      - name: List directory  /usr/local/fusionauth/kickstart inside FA container
        shell: bash
        run: | 
          docker exec -t fusionauth ls -latr /usr/local/fusionauth/kickstart
          sleep 3

      - name: Get openid-configuration
        shell: bash
        run: |
          curl http://localhost:9011/.well-known/openid-configuration

      - name: run deviceauth.sh setDiscovery
        shell: bash
        run: |
          bash ./deviceauth.sh setDiscovery http://localhost:9011/.well-known/openid-configuration
      - name: run deviceauth.sh setClientid
        shell: bash
        run: |
          bash ./deviceauth.sh setClientid 89d998a5-aaef-45d0-9765-adf1f3e00c65
      - name: Show docker-compose logs
        shell: bash
        run: | 
          docker-compose logs          
      - name: run deviceauth.sh authorize
        shell: bash
        run: |
          bash ./deviceauth.sh authorize
          ls -latr $HOME/.oauth2
      - name: Show authrequest
        shell: bash
        run: |
          JSON="$(<$HOME/.oauth2/.tokenrequest.json)"
          echo $JSON
          DEVICECODE=$(echo $JSON|jq -r .device_code)
          echo "devicecode: $DEVICECODE"
          USERCODE=$(echo $JSON|jq -r .user_code)
          echo "usercode: $USERCODE"
          curl http://localhost:9011/oauth2/device/validate?client_id=89d998a5-aaef-45d0-9765-adf1f3e00c65&user_code=$DEVICECODE 
         
      - name: Show docker-compose logs
        shell: bash
        run: | 
          docker-compose logs

      - name: Stop docker
        shell: bash
        run: |
          docker-compose down






