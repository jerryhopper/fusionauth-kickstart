# This is a basic workflow to help you get started with Actions

name: BUILD-TEST

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - "master"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install docker
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install \
            apt-transport-https \
            ca-certificates \
            curl \
            jq \
            gnupg-agent \
            software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository \
             "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
             $(lsb_release -cs) \
             stable"
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io

      - name: Get default docker-compose and .env
        shell: bash
        run: |
          curl -o docker-compose.yml https://raw.githubusercontent.com/FusionAuth/fusionauth-containers/master/docker/fusionauth/docker-compose.yml
          curl -o .env https://raw.githubusercontent.com/FusionAuth/fusionauth-containers/master/docker/fusionauth/.env
          
      - name: Add Variables to .env & show it
        shell: bash
        run: |             
          ## Set the needed Environment variables
          export DISCOVERY_URL=http://localhost:9011/.well-known/openid-configuration
          export FUSIONAUTH_API_KEY=4737ea8520bd454caabb7cb3d36e14bc1832c0d3f70a4189b82598670f11b1bd
          export FUSIONAUTH_APP_KICKSTART_FILE=/usr/local/fusionauth/kickstart/kickstart.json
          export APPLICATION_ID=89d998a5-aaef-45d0-9765-adf1f3e00c65
          export DEF_TENANTID=d7d09513-a3f5-401c-9685-34ab6c552453
          export APP_USEREMAIL=user@local.nu
          export APP_USERPASSWORD=userpassword
          # Make vars persistent thru guthub-action steps.
          ## copy to .env
          echo "">>.env
          echo "DISCOVERY_URL=$DISCOVERY_URL">>.env >> $GITHUB_ENV
          echo "FUSIONAUTH_API_KEY=$FUSIONAUTH_API_KEY">>.env >> $GITHUB_ENV
          echo "FUSIONAUTH_APP_KICKSTART_FILE=$FUSIONAUTH_APP_KICKSTART_FILE">>.env >> $GITHUB_ENV
          echo "APPLICATION_ID=$APPLICATION_ID">>.env >> $GITHUB_ENV
          echo "DEF_TENANTID=$DEF_TENANTID">>.env >> $GITHUB_ENV
          echo "APP_USEREMAIL=$APP_USEREMAIL">>.env >> $GITHUB_ENV
          echo "APP_USERPASSWORD=$APP_USERPASSWORD">>.env >> $GITHUB_ENV
          ## show to screen
          cat .env

      - name: Run docker
        shell: bash
        run: | 
          docker-compose up -d
          sleep 18
      - name: Show docker-compose config
        shell: bash
        run: | 
          docker-compose config
          sleep 3
      - name: GetRetrieve Clientid & ClientSecret for application from api
        shell: bash
        run: |
          echo "FUSIONAUTH_API_KEY:$FUSIONAUTH_API_KEY"
          echo "APPLICATION_ID:$APPLICATION_ID"
          
          APPLICATIONJSON=$(curl -s -H "Authorization: $FUSIONAUTH_API_KEY" http://localhost:9011/api/application/$APPLICATION_ID )
          echo "APPLICATIONJSON:$APPLICATIONJSON"
          export APPLICATIONJSON="$APPLICATIONJSON"
          echo "APPLICATIONJSON=$APPLICATIONJSON">> $GITHUB_ENV
          echo $APPLICATIONJSON
          #
          export CLIENT_ID="$(echo $APPLICATIONJSON|jq -r .application.oauthConfiguration.clientId)"
          echo "CLIENT_ID=$CLIENT_ID">> $GITHUB_ENV
          echo "ClientId=$CLIENT_ID"
        
          #
          export CLIENT_SECRET="$(echo $APPLICATIONJSON|jq -r .application.oauthConfiguration.clientSecret)"
          echo "CLIENT_SECRET=$CLIENT_SECRET">> $GITHUB_ENV
          echo "ClientSecret=$CLIENT_SECRET"  
               
      - name: Get openid-configuration
        shell: bash
        run: |
          curl $DISCOVERY_URL

      - name: run deviceauth.sh setDiscovery
        shell: bash
        run: |
          bash ./deviceauth.sh setDiscovery $DISCOVERY_URL
      - name: run deviceauth.sh setClientid
        shell: bash
        run: |
          echo "ClientId=$CLIENT_ID"
          bash ./deviceauth.sh setClientid $CLIENT_ID
      - name: Show docker-compose logs
        shell: bash
        run: | 
          docker-compose logs          
      - name: run deviceauth.sh authorize
        shell: bash
        run: |
          echo "Using:  curl -m 3 -s -o OUTPUTFILE -X POST -F "client_id=$CLIENTID" -F "scope=offline_access" -w "%{http_code}" URL"
          bash ./deviceauth.sh authorize
          ls -latr $HOME/.oauth2
      - name: Show authrequest, Poll for Authorization status
        shell: bash
        run: |
          JSON="$(<$HOME/.oauth2/.tokenrequest.json)"
          echo $JSON
          USERCODE=$(echo $JSON|jq -r .user_code)
          echo "usercode: $USERCODE"
      - name: deviceauth.sh poll once
        shell: bash
        run: |
          echo "Polling once.."
          bash ./deviceauth.sh poll once
      - name: GET /oauth2/device/validate
        shell: bash
        run: |
          JSON="$(<$HOME/.oauth2/.tokenrequest.json)"
          #echo $JSON
          USERCODE=$(echo $JSON|jq -r .user_code)
          echo "GET http://localhost:9011/oauth2/device/validate?client_id=$CLIENT_ID&user_code=$USERCODE"
          curl -i "http://localhost:9011/oauth2/device/validate?client_id=$CLIENT_ID&user_code=$USERCODE" 
      - name: Manually Authorize device
        shell: bash
        run: |    
          JSON="$(<$HOME/.oauth2/.tokenrequest.json)"
          #echo $JSON
          echo "Manually Authorizing the device."      
          echo "POST http://localhost:9011/oauth2/token  (grant_type=password + user_code=$(echo $JSON|jq -r .user_code))" 
          --data-urlencode 'scope=offline_access' \
          curl -s --location --request POST 'http://localhost:9011/oauth2/token' \
                --header 'Content-Type: application/x-www-form-urlencoded' \
                --data-urlencode 'grant_type=password' \
                --data-urlencode 'client_id=$(echo $(<application.json)|jq -r .application.oauthConfiguration.clientId)' \
                --data-urlencode 'client_secret=$(echo $(<application.json)|jq -r .application.oauthConfiguration.clientSecret)' \
                --data-urlencode 'username=user@local.nu' \
                --data-urlencode 'password=userpassword' \
                --data-urlencode 'user_code=$(echo $JSON|jq -r .user_code)'   
      - name: Poll for authentication
        shell: bash
        run: |    
          echo "Starting to poll for authentication"
          bash ./deviceauth.sh poll once
      - name: Renew authrequest
        shell: bash
        run: |
          bash ./deviceauth.sh renew          
      - name: Show docker-compose logs
        shell: bash
        run: | 
          docker-compose logs

      - name: Stop docker
        shell: bash
        run: |
          docker-compose down






